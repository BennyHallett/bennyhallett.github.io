<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benny Hallett</title>
    <description>Benny Hallett is a software engineer and entrepreneur that loves to learn new things and share them with people.
</description>
    <link>http://bennyhallett.com/</link>
    <atom:link href="http://bennyhallett.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 13 May 2016 07:22:34 +1000</pubDate>
    <lastBuildDate>Fri, 13 May 2016 07:22:34 +1000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Keeping Phoenix Controllers Clean</title>
        <description>&lt;p&gt;As I’ve been working on my recent Elixir project &lt;a href=&quot;http://candlemakerpro.com&quot;&gt;Candle Maker
Pro&lt;/a&gt;, I’ve noticed an issue with the way that
controllers are generated in the &lt;a href=&quot;http://www.phoenixframework.org&quot;&gt;Phoenix
Framework&lt;/a&gt;. In a way it’s very similar to a
problem which I’m familiar with from Rails - Fat Controllers.&lt;/p&gt;

&lt;p&gt;When you generate a controller in Phoenix, the routes that manipulate data
generally follow a pattern:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create changeset&lt;/li&gt;
  &lt;li&gt;Insert / Save / Delete the record&lt;/li&gt;
  &lt;li&gt;Use a case statement and pattern match the result&lt;/li&gt;
  &lt;li&gt;Render or Redirect accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This pattern is quite straight forward in itself, but falls down when we start
to do more complex things.&lt;/p&gt;

&lt;p&gt;For example, if we want to manipulate several models and interact with the
Repo multile times, then the size of a function can increase considerably with
multiple case statements.&lt;/p&gt;

&lt;p&gt;This problem is compounded once again when we have multiple actions within a
controller with this kind of complexity.&lt;/p&gt;

&lt;p&gt;The solution that I’ve come across is very similar to the one that I use in
Rails. It involves moving all of the logic into a separate module (or modules), which I’ve
been calling &lt;code class=&quot;highlighter-rouge&quot;&gt;Operations&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;operations&quot;&gt;Operations&lt;/h2&gt;

&lt;p&gt;The purpose of an Operation is to encapsulate a single behavior of an
application into a single module.&lt;/p&gt;

&lt;p&gt;Think about the process of registering a user. It normally involves more than
just creating the model and saving it. Your process may involve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Correctly hashing the password&lt;/li&gt;
  &lt;li&gt;Saving the user&lt;/li&gt;
  &lt;li&gt;Generating a validation token&lt;/li&gt;
  &lt;li&gt;Sending a validation email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not to mention the various error handling paths.&lt;/p&gt;

&lt;p&gt;In this case, keeping all of this logic in the controller would be too much, so
we use an operation.&lt;/p&gt;

&lt;h3 id=&quot;well-defined-interface&quot;&gt;Well defined interface&lt;/h3&gt;

&lt;p&gt;Operations, as I use them, have well defined interfaces.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An operation should be invoked with the parameters it needs to do it’s work.&lt;/li&gt;
  &lt;li&gt;It should return a tuple to be pattern matched on&lt;/li&gt;
  &lt;li&gt;The return tuple should include all of the information the view requires to
render (or be redirected)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also try to avoid passing in the connection. If paths need to be
generated for rendering I normally do that inside the controller function.&lt;/p&gt;

&lt;p&gt;Given these guidelines, we can go back to a process similar to the one the
generated controller actions use, except now any changes to the behaviour don’t
increase the size of the controller function.&lt;/p&gt;

&lt;p&gt;Here’s an example of how we might handle that same user registration scenario.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# web/operations/register_user.ex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegisterUser&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PasswordHasher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_hashed_password&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_insert&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ValidationToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;ValidationEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Emailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deliver&lt;/span&gt;

    &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# web/controllers/registration_controller.ex&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegisterUser&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RegisterUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;An error occurred&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;register.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;changeset:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;You&#39;re registered&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the example above, the controller action is now stripped back to a handful of
lines&lt;/p&gt;

&lt;p&gt;This technique isn’t revolutionary. It’s pretty standard practice of separating
functionality out into different modules (or classes in an OO language). I think
however that explicitly calling this out on controller actions, and giving it a
name, helps to remind me to keep those controller actions as clean as possible.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 08:22:00 +1000</pubDate>
        <link>http://bennyhallett.com/2016/05/12/keeping-phoenix-controllers-clean.html</link>
        <guid isPermaLink="true">http://bennyhallett.com/2016/05/12/keeping-phoenix-controllers-clean.html</guid>
        
        
      </item>
    
      <item>
        <title>Anything you want</title>
        <description>&lt;p&gt;I’ve begun taking &lt;a href=&quot;http://sivers.org&quot;&gt;Derek’s&lt;/a&gt; approach to reading, by taking
notes about the books I read and keeping them somewhere that I can get to
easily. It’s only fitting that the first book for me to add is his.&lt;/p&gt;

&lt;p&gt;I’ll start by saying I really enjoyed this book, it was quite entertaining.
Not only does it give some sound advice to consider when building and growing a
business, it does it using interesting stories. I found that this helped to
provide some context around the advice, which is always useful when making
decisions in the future.&lt;/p&gt;

&lt;p&gt;The main takeaway that I got from this is that success will come if you create
things that help to solve people’s problems. Create things that people want and
need, and especially things that people ask you for. If you actually care about
helping people and always do what would make the customer most happy, then
you’re setting yourself up for a win.&lt;/p&gt;

&lt;p&gt;Don’t be on your deathbed, having squandered your 1 chance at life, full of
regret because you pursued little distractions rather than big dreams.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sivers.org/hellyeah&quot;&gt;Hell yes, or No&lt;/a&gt; -&amp;gt; A principle that can help you avoid saying yes to things
that you’re not 100% committed to, and making that time available for things
that you are committed to.&lt;/p&gt;

&lt;p&gt;It doesn’t cost a lot of money to start helping people.&lt;/p&gt;

&lt;p&gt;Make yourself unnecessary to the running of your business.&lt;/p&gt;

&lt;p&gt;Take the 1 little thing that you’re aiming to help people with, and envision how
that would work in a perfect world. Ask people how that would work in a perfect
world. That is what you should build.&lt;/p&gt;

&lt;p&gt;Success comes from persistently improving and inventing. If there’s a problem,
solve the problem, don’t keep going hoping that it’ll go away. You don’t have to
go through the obstacle, you can go around it.&lt;/p&gt;

&lt;p&gt;Focus on helping your existing customers. Delight them and the will tell
everyone about you. Case in point, &lt;a href=&quot;https://www.youtube.com/watch?v=KCIXkbfgR6g&quot;&gt;the squid story from CD
Baby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sivers.org/multiply&quot;&gt;Ideas are a multiplier of execution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having many smaller customers is prefereable to a few large ones. The demands or
loss of any one customer is less impactful. Please the majority of your
customers.&lt;/p&gt;

&lt;p&gt;Be clear about who your product is for, and who it’s not for. Excluding people
who don’t fit your products vision and goals will win over those that do.&lt;/p&gt;

&lt;p&gt;It’s hard to know when to sell or leave a project, but if your heart isn’t in
it, and that’s having an effect on how well you’re customers are being taken
care of, then maybe it’s time to hang up the boots.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 18:13:20 +1100</pubDate>
        <link>http://bennyhallett.com/2016/03/08/anything-you-want.html</link>
        <guid isPermaLink="true">http://bennyhallett.com/2016/03/08/anything-you-want.html</guid>
        
        
      </item>
    
      <item>
        <title>The cost of stuff</title>
        <description>&lt;p&gt;The things that we own, whether received as a gift, purchased, or even picked up
for free come with a cost. That cost goes beyond obtaining the initial item, and
continues until we part with it.&lt;/p&gt;

&lt;p&gt;I consider myself a minimalist, but these costs still apply whether you’re
interested in minimalism or not, and it pays to be aware of them.&lt;/p&gt;

&lt;h4 id=&quot;purchase&quot;&gt;Purchase&lt;/h4&gt;

&lt;p&gt;We have to bear the initial cost of the item, unless it’s gifted to us or is
free. This cost comes at various thresholds depending on how we value the item
- it may be expensive, or you may get a bargain.&lt;/p&gt;

&lt;p&gt;This cost is the most obvious to us, but there’s also a hidden sub-element here
- the opportunity cost.&lt;/p&gt;

&lt;p&gt;If this item isn’t something that you desperately need, could the money be used
for a better purpose? Could we use it to pay off any debts we have? Save it?
Or maybe invest it? Could we use it to have a good experience with our family or
friends instead?&lt;/p&gt;

&lt;h4 id=&quot;storage&quot;&gt;Storage&lt;/h4&gt;

&lt;p&gt;It costs me space in my home to keep this item, as well as some extra money since my
home needs to be (if only slightly) larger to store it.&lt;/p&gt;

&lt;p&gt;If we (for the sake of simple maths) say that I live in a 100m/sq home and pay $300
per week for that. I also own an item that takes up 1m/sq. For me to store this
item in my home costs me $3/week or $156/year.&lt;/p&gt;

&lt;p&gt;That may be only a small amount but if we expand that out to all of the items
that we own and never use, then we’re paying quite a bit for the storage of useless
things. Eliminating all of these would let us live in a smaller home, which
costs us less.&lt;/p&gt;

&lt;h4 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h4&gt;

&lt;p&gt;There is a cost associated with keeping stuff maintained in your home.&lt;/p&gt;

&lt;p&gt;Sometimes this will be a monetary cost. You may need to patch a hole in a tent,
or buy some polish to polish those old trophies. This is rare for items that
are stored and never used, but can come up from time to time for items that are
infrequently used or on display. Again, this may not be much, but over time it
adds up and is money that could be better spent.&lt;/p&gt;

&lt;p&gt;It’s not only monetary costs though. Keeping these items can eat away at our time.
When we move house, they need to be packed, and moved, and possibly unpacked.
When we’re looking for something, they need to be moved, or searched through.
And when we’re cleaning, they need to be cleaned, or cleaned around.&lt;/p&gt;

&lt;h4 id=&quot;mental&quot;&gt;Mental&lt;/h4&gt;

&lt;p&gt;We endure a mental cost for the things we own.&lt;/p&gt;

&lt;p&gt;For the items that sit around our home unused, we endure the cost of
clutter. These things just sit around our home. We notice them. They get in the
way. If they’re in a cupboard, they make it difficult to find other things.&lt;/p&gt;

&lt;p&gt;And don’t forget the pain of regret every time we see or think about those
unused items. The purchase we should never have made; The thing that we never
use; Our un-achieved goals.&lt;/p&gt;

&lt;h3 id=&quot;small-needs&quot;&gt;Small needs&lt;/h3&gt;

&lt;p&gt;When I sit down and really think about the things I need, &lt;em&gt;really&lt;/em&gt; need, it
quickly becomes clear that it isn’t much.&lt;/p&gt;

&lt;p&gt;Food and water, housing and clothing all come very high up the list but even the
essentials have room for improvement. We can eat simpler meals, and cook more
often. With less stuff we can have a smaller place, and trimming back the
wardrobe is always possible.&lt;/p&gt;

&lt;p&gt;We also have some basic household items that are pretty much required. Some
items to cook with, and some to eat with. A bed, a fridge, and somewhere to sit.&lt;/p&gt;

&lt;p&gt;On top of these survival items there are only really 2 things that I really
need. Access to learning and a way to create things, and these come pretty
easily with access to the internet and a laptop.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://theminimalists.com&quot;&gt;The Minimalists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0615648223/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0615648223&amp;amp;linkCode=as2&amp;amp;tag=bennyhalcom-20&amp;amp;linkId=DC3B7B37Z233MHTW&quot;&gt;Minimalism - live a meaningful
life&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.becomingminimalist.com/&quot;&gt;Becoming Minimalist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://exilelifestyle.com/minimalism-explained/&quot;&gt;Minimalism explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 18:13:20 +1100</pubDate>
        <link>http://bennyhallett.com/2016/03/07/the-cost-of-stuff.html</link>
        <guid isPermaLink="true">http://bennyhallett.com/2016/03/07/the-cost-of-stuff.html</guid>
        
        
      </item>
    
  </channel>
</rss>
